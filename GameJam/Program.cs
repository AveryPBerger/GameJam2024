using System.Diagnostics.CodeAnalysis;
using System.Reflection.Metadata.Ecma335;
using static System.Console;
namespace GameJam
{
    /*
     * How things are gna happen: 
     * 
     * Customer walks in and states: 
     *      Acid/Base
     *      Moles
     *      Desired PH 
     *      
     * User has to give:
     *      type of acid 
     *      concentration of acid
     *      concentration of the conjugate Base
     *
     * Other Info generated by program: 
     *      Pka derived by the weak acid chosen
     */


    /*
     * Godot script stuff 
     * func Customer_Moles():
	        var rng = RandomNumberGenerator.new()
	        var scienceNotation = [0,0]
	        scienceNotation[0] = rng.randf_range(4,7)
	        scienceNotation[1] = rng.randf_range(-7,-1)
	
	        return scienceNotation

       func Output(moles):
	
	        Dialogue_Box.text = "Hi I'm a Strong Acid of" + (str(round(moles[0]))) + "e" + 
            (str(round(moles[1])))  + " Moles. I want a buffer solution that'll get me to be within
			[3 to 5.5]"
     */


    internal class Program
    {
        
        public static string[] WeakAcids =
            {
            "Formic Acid (HCOOH) Pka of 3.7", //1
            "Acetic Acid (CH3COOH) Pka of 4.7", //2 
            "Benzoic Acid (C6H5COOH) Pka of  4.2", //3
            "Hydrofluoric Acid (HF) Pka of 3.2", //4
            "Carbonic Acid (H2CO3) Pka of 6.3", //5
            "Nitrous Acid (HNO2) Pka of 3.4",}; //6
        public static double[] WeakAcidsPka = 
            {
            3.7, //1 
            4.7, //2 
            4.2, //3
            3.2, //4
            6.3, //5
            3.4, //6
            };
        public static string[] WeakBases =
        {
            "Ammonium Hydroxide (NH4OH)",
            "Aniline (C6H5NH2)",
            "Ammonia (NH3)",
            "Methylamine (CH3NH2)",
            "Ethylamine (CH3CH2NH2)",
            "Aluminum hydroxide (Al(OH)3)",
            "Magnesium Hydroxide (Mg(OH)2)",
            "Pyridine (C5H5N)",
            "Sodium Bicarbonate (NaHCO3)"
        };
        const int MinPH = 2;
        const int MaxPH = 8;
        const double LPerCup = 0.236588;
        public static Random rnd = new();
        
        static void Main(string[] args)
        {
            bool gameloop = true;
            bool flag = true;
            Console.Clear();
            while (gameloop)
            {            
                double[] custMoles = CustomerMoles();

                Output(CustomerDesiredPH(), custMoles);

                Console.WriteLine();
                int index = AcidIndex();

                while (flag)
                {
                    double[] conjBase = GetUserInput("Please enter the conjugate base in exponential notation using 'e'");
                    double[] weakAcid = GetUserInput("Please enter the weak acid in exponential notation using 'e'");

                    double buffRatio = (SNCalculator(weakAcid[0], weakAcid[1]/ SNCalculator(conjBase[0], conjBase[1])));
                    if (buffRatio < 0.1 || buffRatio > 10)
                    {
                        flag = false;
                        WriteLine("Your buffer ratio is waaack dude, try again some more");
                    }
                    else
                    {
                        double answers = UsersAnswer(conjBase, weakAcid, custMoles, index);
                        AnswerCheck(answers, true);
                    }
                }
                

                

                Console.WriteLine("Do you want to play another round? \n Y/N");
                string reset = Console.ReadLine();
                if (reset == "y" || reset == "Y")
                {
                    gameloop = true;
                }
                else
                {
                    gameloop = false;
                }
            }
            Console.ReadLine();   
        }
        static void AnswerCheck(double ph, bool solutionType)
        {
            if (solutionType)
            {
                if (ph >= 3 && ph <= 5.5)
                {
                    Console.WriteLine("You're Right! Thank you very Much kind sir");
                }
                else
                {
                    Console.WriteLine("Ich habe so große Schmerzen! Mein Inneres brennt, warum hast du mir diese Folter angetan, ich beschuldige dich und nur dich");
                
                    
                }
            }
        }
        static double[] GetUserInput(string msg)
        {
            Console.WriteLine(msg);
            string input = Console.ReadLine();

            return SplitInput(input);

        }
        static int AcidIndex()
        {
            Console.WriteLine("please pick your acid");
            for (int i = 0; i < WeakAcids.Length; i++)
            {
                Console.WriteLine($"{i + 1}. {WeakAcids[i]}");
            }
            int input = InputValidation();
            return input -1 ;
        }

        static int InputValidation()
        {
            int input;

            while (!int.TryParse(Console.ReadLine(), out input))
            {
                Console.WriteLine("Please enter a valid option:");
            }
            return input;
        }
        static double[] SplitInput(string input)
        {
            string[] inputs = input.Split('e');
            double[] notationInput = new double[inputs.Length];


            for (int i = 0; i < inputs.Length; i++)
            {
                notationInput[i] = Convert.ToDouble(inputs[i]);
            }


            return notationInput;
        }
        static double UsersAnswer(double[] conjBase, double[] weakAcid, double[] guyMoles,int index)
        {
            double pKa;

            pKa = WeakAcidsPka[index];
            double initalPh = (LPerCup * SNCalculator(conjBase[0], conjBase[1]));

            initalPh = initalPh / (LPerCup * SNCalculator(weakAcid[0], weakAcid[1]) );

            


            double ph = (LPerCup * SNCalculator(conjBase[0], conjBase[1]))
                - SNCalculator(guyMoles[0],guyMoles[1]); 

            ph = ph/ (LPerCup * SNCalculator(weakAcid[0], weakAcid[1]) + SNCalculator(guyMoles[0], guyMoles[1]));

            if (initalPh > 0)
            {
                ph = Math.Log(ph, 10);
                ph += pKa;

                initalPh = Math.Log(initalPh, 10);
                initalPh += pKa;
                Console.WriteLine($"The pH of the buffer solution you made is {Math.Round(initalPh,3)}\n");

                Console.WriteLine($"After it mixes with the strong acid it equates to {Math.Round(ph,3)}!");
            }
            else
            {
                Console.WriteLine("ERROR!");
            }
            

            
            
            return ph;
        }

        static double SNCalculator(double bottom, double top)
        {
            double result = bottom * (Math.Pow(10, top));
            return result;
        }
        
        static double[] CustomerMoles() //imported 
        {
            double[] scienceNotation = new double[2];
            //Example: 0.01 x 10-1, 0.1x10-7 // 5x10-7
            scienceNotation[0] = rnd.Next(4, 7);
            scienceNotation[1] = (double)rnd.Next(-7, 0);
            return scienceNotation;
        }
        


        static bool CustomerDesiredPH()
        {
            bool solutionType;

            int type = rnd.Next(1, 1);
            if (type == 1)
            {
                solutionType = false; //is base
            }
            else
            {
                solutionType = true; //is acid
            }

            return true;
        }



        static void Output(bool solutionType, double[] scienceNotation)
        {
            if (solutionType)
            {
                Console.Write("----------------------------\r\n|          _____           |\r\n|         / o o \\          |\r\n|         |  _  |          |\r\n|         \\_____/          |\r\n|       |_O_| |__O_|       |\r\n|           |=|            |\r\n|           |=|            |\r\n----------------------------");
                Console.WriteLine($"\nHi I'm a Strong Acid of {Math.Round(scienceNotation[0], 3)}e{scienceNotation[1]} Moles. I want a buffer solution that'll get me to be within " +
                    $"[3 to 5.5]");
                
                
            }
            else
            {
                Console.WriteLine($"Hi I'm a Strong Base of {Math.Round(scienceNotation[0], 3)}e{scienceNotation[1]} Moles. I want a buffer solution that'll get me to be within " +
                    $"[8 to 10.5]");
            }
        }
    }
}
